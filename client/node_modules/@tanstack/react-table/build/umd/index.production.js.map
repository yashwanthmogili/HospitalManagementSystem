{"version":3,"file":"index.production.js","sources":["../../../table-core/build/esm/index.js","../../src/index.tsx"],"sourcesContent":["/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n// Is this type a tuple?\n// If this type is a tuple, what indices are allowed?\n///\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction noop() {//\n}\nfunction makeStateUpdater(key, instance) {\n  return updater => {\n    instance.setState(old => {\n      return { ...old,\n        [key]: functionalUpdate(updater, old[key])\n      };\n    });\n  };\n}\nfunction isFunction(d) {\n  return d instanceof Function;\n}\nfunction flattenBy(arr, getChildren) {\n  const flat = [];\n\n  const recurse = subArr => {\n    subArr.forEach(item => {\n      flat.push(item);\n      const children = getChildren(item);\n\n      if (children != null && children.length) {\n        recurse(children);\n      }\n    });\n  };\n\n  recurse(arr);\n  return flat;\n}\nfunction memo(getDeps, fn, opts) {\n  let deps = [];\n  let result;\n  return () => {\n    let depTime;\n    if (opts.key && opts.debug) depTime = Date.now();\n    const newDeps = getDeps();\n    const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);\n\n    if (!depsChanged) {\n      return result;\n    }\n\n    deps = newDeps;\n    let resultTime;\n    if (opts.key && opts.debug) resultTime = Date.now();\n    result = fn(...newDeps);\n    opts == null ? void 0 : opts.onChange == null ? void 0 : opts.onChange(result);\n\n    if (opts.key && opts.debug) {\n      if (opts != null && opts.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n        const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n        const resultFpsPercentage = resultEndTime / 16;\n\n        const pad = (str, num) => {\n          str = String(str);\n\n          while (str.length < num) {\n            str = ' ' + str;\n          }\n\n          return str;\n        };\n\n        console.info(\"%c\\u23F1 \" + pad(resultEndTime, 5) + \" /\" + pad(depEndTime, 5) + \" ms\", \"\\n            font-size: .6rem;\\n            font-weight: bold;\\n            color: hsl(\" + Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120)) + \"deg 100% 31%);\", opts == null ? void 0 : opts.key);\n      }\n    }\n\n    return result;\n  };\n}\n\nfunction createColumn(table, columnDef, depth, parent) {\n  var _ref, _resolvedColumnDef$id;\n\n  const defaultColumn = table._getDefaultColumnDef();\n\n  const resolvedColumnDef = { ...defaultColumn,\n    ...columnDef\n  };\n  const accessorKey = resolvedColumnDef.accessorKey;\n  let id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? accessorKey.replace('.', '_') : undefined) != null ? _ref : typeof resolvedColumnDef.header === 'string' ? resolvedColumnDef.header : undefined;\n  let accessorFn;\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn;\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = originalRow => {\n        let result = originalRow;\n\n        for (const key of accessorKey.split('.')) {\n          result = result[key];\n        }\n\n        return result;\n      };\n    } else {\n      accessorFn = originalRow => originalRow[resolvedColumnDef.accessorKey];\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(resolvedColumnDef.accessorFn ? \"Columns require an id when using an accessorFn\" : \"Columns require an id when using a non-string header\");\n    }\n\n    throw new Error();\n  }\n\n  let column = {\n    id: \"\" + String(id),\n    accessorFn,\n    parent: parent,\n    depth,\n    columnDef: resolvedColumnDef,\n    columns: [],\n    getFlatColumns: memo(() => [true], () => {\n      var _column$columns;\n\n      return [column, ...((_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap(d => d.getFlatColumns()))];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n      debug: () => {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      }\n    }),\n    getLeafColumns: memo(() => [table._getOrderColumnsFn()], orderColumns => {\n      var _column$columns2;\n\n      if ((_column$columns2 = column.columns) != null && _column$columns2.length) {\n        let leafColumns = column.columns.flatMap(column => column.getLeafColumns());\n        return orderColumns(leafColumns);\n      }\n\n      return [column];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n      debug: () => {\n        var _table$options$debugA2;\n\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    })\n  };\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn == null ? void 0 : feature.createColumn(column, table));\n  }, column); // Yes, we have to convert table to uknown, because we know more than the compiler here.\n\n  return column;\n}\n\n//\nfunction createHeader(table, column, options) {\n  var _options$id;\n\n  const id = (_options$id = options.id) != null ? _options$id : column.id;\n  let header = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null,\n    getLeafHeaders: () => {\n      const leafHeaders = [];\n\n      const recurseHeader = h => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader);\n        }\n\n        leafHeaders.push(h);\n      };\n\n      recurseHeader(header);\n      return leafHeaders;\n    },\n    getContext: () => ({\n      table,\n      header: header,\n      column\n    })\n  };\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader == null ? void 0 : feature.createHeader(header, table));\n  });\n\n  return header;\n}\n\nconst Headers = {\n  createTable: table => {\n    return {\n      // Header Groups\n      getHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n        var _left$map$filter, _right$map$filter;\n\n        const leftColumns = (_left$map$filter = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter : [];\n        const rightColumns = (_right$map$filter = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter : [];\n        const centerColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n        const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);\n        return headerGroups;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n        debug: () => {\n          var _table$options$debugA;\n\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugHeaders;\n        }\n      }),\n      getCenterHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n        return buildHeaderGroups(allColumns, leafColumns, table, 'center');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n        debug: () => {\n          var _table$options$debugA2;\n\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugHeaders;\n        }\n      }),\n      getLeftHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left) => {\n        var _left$map$filter2;\n\n        const orderedLeafColumns = (_left$map$filter2 = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter2 : [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n        debug: () => {\n          var _table$options$debugA3;\n\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugHeaders;\n        }\n      }),\n      getRightHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right) => {\n        var _right$map$filter2;\n\n        const orderedLeafColumns = (_right$map$filter2 = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter2 : [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n        debug: () => {\n          var _table$options$debugA4;\n\n          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugHeaders;\n        }\n      }),\n      // Footer Groups\n      getFooterGroups: memo(() => [table.getHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n        debug: () => {\n          var _table$options$debugA5;\n\n          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugHeaders;\n        }\n      }),\n      getLeftFooterGroups: memo(() => [table.getLeftHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n        debug: () => {\n          var _table$options$debugA6;\n\n          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugHeaders;\n        }\n      }),\n      getCenterFooterGroups: memo(() => [table.getCenterHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n        debug: () => {\n          var _table$options$debugA7;\n\n          return (_table$options$debugA7 = table.options.debugAll) != null ? _table$options$debugA7 : table.options.debugHeaders;\n        }\n      }),\n      getRightFooterGroups: memo(() => [table.getRightHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n        debug: () => {\n          var _table$options$debugA8;\n\n          return (_table$options$debugA8 = table.options.debugAll) != null ? _table$options$debugA8 : table.options.debugHeaders;\n        }\n      }),\n      // Flat Headers\n      getFlatHeaders: memo(() => [table.getHeaderGroups()], headerGroups => {\n        return headerGroups.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n        debug: () => {\n          var _table$options$debugA9;\n\n          return (_table$options$debugA9 = table.options.debugAll) != null ? _table$options$debugA9 : table.options.debugHeaders;\n        }\n      }),\n      getLeftFlatHeaders: memo(() => [table.getLeftHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n        debug: () => {\n          var _table$options$debugA10;\n\n          return (_table$options$debugA10 = table.options.debugAll) != null ? _table$options$debugA10 : table.options.debugHeaders;\n        }\n      }),\n      getCenterFlatHeaders: memo(() => [table.getCenterHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n        debug: () => {\n          var _table$options$debugA11;\n\n          return (_table$options$debugA11 = table.options.debugAll) != null ? _table$options$debugA11 : table.options.debugHeaders;\n        }\n      }),\n      getRightFlatHeaders: memo(() => [table.getRightHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n        debug: () => {\n          var _table$options$debugA12;\n\n          return (_table$options$debugA12 = table.options.debugAll) != null ? _table$options$debugA12 : table.options.debugHeaders;\n        }\n      }),\n      // Leaf Headers\n      getCenterLeafHeaders: memo(() => [table.getCenterFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders;\n\n          return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n        debug: () => {\n          var _table$options$debugA13;\n\n          return (_table$options$debugA13 = table.options.debugAll) != null ? _table$options$debugA13 : table.options.debugHeaders;\n        }\n      }),\n      getLeftLeafHeaders: memo(() => [table.getLeftFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders2;\n\n          return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n        debug: () => {\n          var _table$options$debugA14;\n\n          return (_table$options$debugA14 = table.options.debugAll) != null ? _table$options$debugA14 : table.options.debugHeaders;\n        }\n      }),\n      getRightLeafHeaders: memo(() => [table.getRightFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders3;\n\n          return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n        debug: () => {\n          var _table$options$debugA15;\n\n          return (_table$options$debugA15 = table.options.debugAll) != null ? _table$options$debugA15 : table.options.debugHeaders;\n        }\n      }),\n      getLeafHeaders: memo(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left, center, right) => {\n        var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;\n\n        return [...((_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : []), ...((_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : []), ...((_right$0$headers = (_right$ = right[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : [])].map(header => {\n          return header.getLeafHeaders();\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n        debug: () => {\n          var _table$options$debugA16;\n\n          return (_table$options$debugA16 = table.options.debugAll) != null ? _table$options$debugA16 : table.options.debugHeaders;\n        }\n      })\n    };\n  }\n};\nfunction buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {\n  var _headerGroups$0$heade, _headerGroups$;\n\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n  let maxDepth = 0;\n\n  const findMaxDepth = function (columns, depth) {\n    if (depth === void 0) {\n      depth = 1;\n    }\n\n    maxDepth = Math.max(maxDepth, depth);\n    columns.filter(column => column.getIsVisible()).forEach(column => {\n      var _column$columns;\n\n      if ((_column$columns = column.columns) != null && _column$columns.length) {\n        findMaxDepth(column.columns, depth + 1);\n      }\n    }, 0);\n  };\n\n  findMaxDepth(allColumns);\n  let headerGroups = [];\n\n  const createHeaderGroup = (headersToGroup, depth) => {\n    // The header group we are creating\n    const headerGroup = {\n      depth,\n      id: [headerFamily, \"\" + depth].filter(Boolean).join('_'),\n      headers: []\n    }; // The parent columns we're going to scan next\n\n    const pendingParentHeaders = []; // Scan each column for parents\n\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;\n      let column;\n      let isPlaceholder = false;\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent;\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column;\n        isPlaceholder = true;\n      }\n\n      if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup);\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder ? \"\" + pendingParentHeaders.filter(d => d.column === column).length : undefined,\n          depth,\n          index: pendingParentHeaders.length\n        }); // Add the headerToGroup as a subHeader of the new header\n\n        header.subHeaders.push(headerToGroup); // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n\n        pendingParentHeaders.push(header);\n      }\n\n      headerGroup.headers.push(headerToGroup);\n      headerToGroup.headerGroup = headerGroup;\n    });\n    headerGroups.push(headerGroup);\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1);\n    }\n  };\n\n  const bottomHeaders = columnsToGroup.map((column, index) => createHeader(table, column, {\n    depth: maxDepth,\n    index\n  }));\n  createHeaderGroup(bottomHeaders, maxDepth - 1);\n  headerGroups.reverse(); // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = headers => {\n    const filteredHeaders = headers.filter(header => header.column.getIsVisible());\n    return filteredHeaders.map(header => {\n      let colSpan = 0;\n      let rowSpan = 0;\n      let childRowSpans = [0];\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = [];\n        recurseHeadersForSpans(header.subHeaders).forEach(_ref => {\n          let {\n            colSpan: childColSpan,\n            rowSpan: childRowSpan\n          } = _ref;\n          colSpan += childColSpan;\n          childRowSpans.push(childRowSpan);\n        });\n      } else {\n        colSpan = 1;\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans);\n      rowSpan = rowSpan + minChildRowSpan;\n      header.colSpan = colSpan;\n      header.rowSpan = rowSpan;\n      return {\n        colSpan,\n        rowSpan\n      };\n    });\n  };\n\n  recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);\n  return headerGroups;\n}\n\n//\nconst defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER\n};\n\nconst getDefaultColumnSizingInfoState = () => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: []\n});\n\nconst ColumnSizing = {\n  getDefaultColumnDef: () => {\n    return defaultColumnSizing;\n  },\n  getInitialState: state => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getSize: () => {\n        var _column$columnDef$min, _ref, _column$columnDef$max;\n\n        const columnSize = table.getState().columnSizing[column.id];\n        return Math.min(Math.max((_column$columnDef$min = column.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);\n      },\n      getStart: position => {\n        const columns = !position ? table.getVisibleLeafColumns() : position === 'left' ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();\n        const index = columns.findIndex(d => d.id === column.id);\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1];\n          return prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize();\n        }\n\n        return 0;\n      },\n      resetSize: () => {\n        table.setColumnSizing(_ref2 => {\n          let {\n            [column.id]: _,\n            ...rest\n          } = _ref2;\n          return rest;\n        });\n      },\n      getCanResize: () => {\n        var _column$columnDef$ena, _table$options$enable;\n\n        return ((_column$columnDef$ena = column.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id;\n      }\n    };\n  },\n  createHeader: (header, table) => {\n    return {\n      getSize: () => {\n        let sum = 0;\n\n        const recurse = header => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse);\n          } else {\n            var _header$column$getSiz;\n\n            sum += (_header$column$getSiz = header.column.getSize()) != null ? _header$column$getSiz : 0;\n          }\n        };\n\n        recurse(header);\n        return sum;\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader = header.headerGroup.headers[header.index - 1];\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();\n        }\n\n        return 0;\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id);\n        const canResize = column.getCanResize();\n        return e => {\n          if (!canResize) {\n            return;\n          }\n          e.persist == null ? void 0 : e.persist();\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return;\n            }\n          }\n\n          const startSize = header.getSize();\n          const columnSizingStart = header ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()]) : [[column.id, column.getSize()]];\n          const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;\n\n          const updateOffset = (eventType, clientXPos) => {\n            if (typeof clientXPos !== 'number') {\n              return;\n            }\n\n            let newColumnSizing = {};\n            table.setColumnSizingInfo(old => {\n              var _old$startOffset, _old$startSize;\n\n              const deltaOffset = clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0);\n              const deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);\n              old.columnSizingStart.forEach(_ref3 => {\n                let [columnId, headerSize] = _ref3;\n                newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;\n              });\n              return { ...old,\n                deltaOffset,\n                deltaPercentage\n              };\n            });\n\n            if (table.options.columnResizeMode === 'onChange' || eventType === 'end') {\n              table.setColumnSizing(old => ({ ...old,\n                ...newColumnSizing\n              }));\n            }\n          };\n\n          const onMove = clientXPos => updateOffset('move', clientXPos);\n\n          const onEnd = clientXPos => {\n            updateOffset('end', clientXPos);\n            table.setColumnSizingInfo(old => ({ ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: []\n            }));\n          };\n\n          const mouseEvents = {\n            moveHandler: e => onMove(e.clientX),\n            upHandler: e => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler);\n              document.removeEventListener('mouseup', mouseEvents.upHandler);\n              onEnd(e.clientX);\n            }\n          };\n          const passiveIfSupported = passiveEventSupported() ? {\n            passive: false\n          } : false;\n\n          if (isTouchStartEvent(e)) ; else {\n            document.addEventListener('mousemove', mouseEvents.moveHandler, passiveIfSupported);\n            document.addEventListener('mouseup', mouseEvents.upHandler, passiveIfSupported);\n          }\n\n          table.setColumnSizingInfo(old => ({ ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id\n          }));\n        };\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater),\n      setColumnSizingInfo: updater => table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater),\n      resetColumnSizing: defaultState => {\n        var _table$initialState$c;\n\n        table.setColumnSizing(defaultState ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});\n      },\n      resetHeaderSizeInfo: defaultState => {\n        var _table$initialState$c2;\n\n        table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());\n      },\n      getTotalSize: () => {\n        var _table$getHeaderGroup, _table$getHeaderGroup2;\n\n        return (_table$getHeaderGroup = (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getHeaderGroup : 0;\n      },\n      getLeftTotalSize: () => {\n        var _table$getLeftHeaderG, _table$getLeftHeaderG2;\n\n        return (_table$getLeftHeaderG = (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getLeftHeaderG : 0;\n      },\n      getCenterTotalSize: () => {\n        var _table$getCenterHeade, _table$getCenterHeade2;\n\n        return (_table$getCenterHeade = (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getCenterHeade : 0;\n      },\n      getRightTotalSize: () => {\n        var _table$getRightHeader, _table$getRightHeader2;\n\n        return (_table$getRightHeader = (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getRightHeader : 0;\n      }\n    };\n  }\n};\nlet passiveSupported = null;\nfunction passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported;\n  let supported = false;\n\n  try {\n    const options = {\n      get passive() {\n        supported = true;\n        return false;\n      }\n\n    };\n\n    const noop = () => {};\n\n    window.addEventListener('test', noop, options);\n    window.removeEventListener('test', noop);\n  } catch (err) {\n    supported = false;\n  }\n\n  passiveSupported = supported;\n  return passiveSupported;\n}\n\nfunction isTouchStartEvent(e) {\n  return e.type === 'touchstart';\n}\n\n//\nconst Expanding = {\n  getInitialState: state => {\n    return {\n      expanded: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    return {\n      _autoResetExpanded: () => {\n        var _ref, _table$options$autoRe;\n\n        if (!registered) {\n          table._queue(() => {\n            registered = true;\n          });\n\n          return;\n        }\n\n        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {\n          if (queued) return;\n          queued = true;\n\n          table._queue(() => {\n            table.resetExpanded();\n            queued = false;\n          });\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true);\n        } else {\n          table.setExpanded({});\n        }\n      },\n      resetExpanded: defaultState => {\n        var _table$initialState$e, _table$initialState;\n\n        table.setExpanded(defaultState ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand());\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return e => {\n          e.persist == null ? void 0 : e.persist();\n          table.toggleAllRowsExpanded();\n        };\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded;\n        return expanded === true || Object.values(expanded).some(Boolean);\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded; // If expanded is true, save some cycles and return true\n\n        if (typeof expanded === 'boolean') {\n          return expanded === true;\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false;\n        } // If any row is not expanded, return false\n\n\n        if (table.getRowModel().flatRows.some(row => row.getIsExpanded())) {\n          return false;\n        } // They must all be expanded :shrug:\n\n\n        return true;\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0;\n        const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);\n        rowIds.forEach(id => {\n          const splitId = id.split('.');\n          maxDepth = Math.max(maxDepth, splitId.length);\n        });\n        return maxDepth;\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table);\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel();\n        }\n\n        return table._getExpandedRowModel();\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          var _expanded;\n\n          const exists = old === true ? true : !!(old != null && old[row.id]);\n          let oldExpanded = {};\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true;\n            });\n          } else {\n            oldExpanded = old;\n          }\n\n          expanded = (_expanded = expanded) != null ? _expanded : !exists;\n\n          if (!exists && expanded) {\n            return { ...oldExpanded,\n              [row.id]: true\n            };\n          }\n\n          if (exists && !expanded) {\n            const {\n              [row.id]: _,\n              ...rest\n            } = oldExpanded;\n            return rest;\n          }\n\n          return old;\n        });\n      },\n      getIsExpanded: () => {\n        var _table$options$getIsR;\n\n        const expanded = table.getState().expanded;\n        return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));\n      },\n      getCanExpand: () => {\n        var _table$options$getRow, _table$options$enable, _row$subRows;\n\n        return (_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand();\n        return () => {\n          if (!canExpand) return;\n          row.toggleExpanded();\n        };\n      }\n    };\n  }\n};\n\nconst includesString = (row, columnId, filterValue) => {\n  var _row$getValue;\n\n  const search = filterValue.toLowerCase();\n  return (_row$getValue = row.getValue(columnId)) == null ? void 0 : _row$getValue.toLowerCase().includes(search);\n};\n\nincludesString.autoRemove = val => testFalsey(val);\n\nconst includesStringSensitive = (row, columnId, filterValue) => {\n  var _row$getValue2;\n\n  return (_row$getValue2 = row.getValue(columnId)) == null ? void 0 : _row$getValue2.includes(filterValue);\n};\n\nincludesStringSensitive.autoRemove = val => testFalsey(val);\n\nconst equalsString = (row, columnId, filterValue) => {\n  var _row$getValue3;\n\n  return ((_row$getValue3 = row.getValue(columnId)) == null ? void 0 : _row$getValue3.toLowerCase()) === filterValue.toLowerCase();\n};\n\nequalsString.autoRemove = val => testFalsey(val);\n\nconst arrIncludes = (row, columnId, filterValue) => {\n  var _row$getValue4;\n\n  return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);\n};\n\narrIncludes.autoRemove = val => testFalsey(val) || !(val != null && val.length);\n\nconst arrIncludesAll = (row, columnId, filterValue) => {\n  return !filterValue.some(val => {\n    var _row$getValue5;\n\n    return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));\n  });\n};\n\narrIncludesAll.autoRemove = val => testFalsey(val) || !(val != null && val.length);\n\nconst arrIncludesSome = (row, columnId, filterValue) => {\n  return filterValue.some(val => {\n    var _row$getValue6;\n\n    return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);\n  });\n};\n\narrIncludesSome.autoRemove = val => testFalsey(val) || !(val != null && val.length);\n\nconst equals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) === filterValue;\n};\n\nequals.autoRemove = val => testFalsey(val);\n\nconst weakEquals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) == filterValue;\n};\n\nweakEquals.autoRemove = val => testFalsey(val);\n\nconst inNumberRange = (row, columnId, filterValue) => {\n  let [min, max] = filterValue;\n  const rowValue = row.getValue(columnId);\n  return rowValue >= min && rowValue <= max;\n};\n\ninNumberRange.resolveFilterValue = val => {\n  let [unsafeMin, unsafeMax] = val;\n  let parsedMin = typeof unsafeMin !== 'number' ? parseFloat(unsafeMin) : unsafeMin;\n  let parsedMax = typeof unsafeMax !== 'number' ? parseFloat(unsafeMax) : unsafeMax;\n  let min = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;\n\n  if (min > max) {\n    const temp = min;\n    min = max;\n    max = temp;\n  }\n\n  return [min, max];\n};\n\ninNumberRange.autoRemove = val => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]); // Export\n\n\nconst filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange\n};\n\n// Utils\nfunction testFalsey(val) {\n  return val === undefined || val === null || val === '';\n}\n\n//\nconst Filters = {\n  getDefaultColumnDef: () => {\n    return {\n      filterFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        var _table$getCoreRowMode, _table$getCoreRowMode2;\n\n        const value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null ? void 0 : (_table$getCoreRowMode2 = _table$getCoreRowMode._getAllCellsByColumnId()[column.id]) == null ? void 0 : _table$getCoreRowMode2.getValue();\n        return typeof value === 'string' || typeof value === 'number';\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n\n        if (typeof value === 'string') {\n          return filterFns.includesString;\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange;\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals;\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals;\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes;\n        }\n\n        return filterFns.weakEquals;\n      },\n      getFilterFn: () => {\n        var _table$options$filter, _table$options$filter2;\n\n        return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn() : (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn];\n      },\n      getCanFilter: () => {\n        var _column$columnDef$ena, _table$options$enable, _table$options$enable2;\n\n        return ((_column$columnDef$ena = column.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column.accessorFn;\n      },\n      getCanGlobalFilter: () => {\n        var _column$columnDef$ena2, _table$options$enable3, _table$options$enable4, _table$options$getCol;\n\n        return ((_column$columnDef$ena2 = column.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena2 : true) && ((_table$options$enable3 = table.options.enableGlobalFilter) != null ? _table$options$enable3 : true) && ((_table$options$enable4 = table.options.enableFilters) != null ? _table$options$enable4 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column)) != null ? _table$options$getCol : true) && !!column.accessorFn;\n      },\n      getIsFiltered: () => column.getFilterIndex() > -1,\n      getFilterValue: () => {\n        var _table$getState$colum, _table$getState$colum2;\n\n        return (_table$getState$colum = table.getState().columnFilters) == null ? void 0 : (_table$getState$colum2 = _table$getState$colum.find(d => d.id === column.id)) == null ? void 0 : _table$getState$colum2.value;\n      },\n      getFilterIndex: () => {\n        var _table$getState$colum3, _table$getState$colum4;\n\n        return (_table$getState$colum3 = (_table$getState$colum4 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum4.findIndex(d => d.id === column.id)) != null ? _table$getState$colum3 : -1;\n      },\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn();\n          const previousfilter = old == null ? void 0 : old.find(d => d.id === column.id);\n          const newFilter = functionalUpdate(value, previousfilter ? previousfilter.value : undefined); //\n\n          if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {\n            var _old$filter;\n\n            return (_old$filter = old == null ? void 0 : old.filter(d => d.id !== column.id)) != null ? _old$filter : [];\n          }\n\n          const newFilterObj = {\n            id: column.id,\n            value: newFilter\n          };\n\n          if (previousfilter) {\n            var _old$map;\n\n            return (_old$map = old == null ? void 0 : old.map(d => {\n              if (d.id === column.id) {\n                return newFilterObj;\n              }\n\n              return d;\n            })) != null ? _old$map : [];\n          }\n\n          if (old != null && old.length) {\n            return [...old, newFilterObj];\n          }\n\n          return [newFilterObj];\n        });\n      },\n      _getFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n\n        return column._getFacetedRowModel();\n      },\n      _getFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map();\n        }\n\n        return column._getFacetedUniqueValues();\n      },\n      _getFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined;\n        }\n\n        return column._getFacetedMinMaxValues();\n      } // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {}\n    };\n  },\n  createTable: table => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString;\n      },\n      getGlobalFilterFn: () => {\n        var _table$options$filter3, _table$options$filter4;\n\n        const {\n          globalFilterFn: globalFilterFn\n        } = table.options;\n        return isFunction(globalFilterFn) ? globalFilterFn : globalFilterFn === 'auto' ? table.getGlobalAutoFilterFn() : (_table$options$filter3 = (_table$options$filter4 = table.options.filterFns) == null ? void 0 : _table$options$filter4[globalFilterFn]) != null ? _table$options$filter3 : filterFns[globalFilterFn];\n      },\n      setColumnFilters: updater => {\n        const leafColumns = table.getAllLeafColumns();\n\n        const updateFn = old => {\n          var _functionalUpdate;\n\n          return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id);\n\n            if (column) {\n              const filterFn = column.getFilterFn();\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false;\n              }\n            }\n\n            return true;\n          });\n        };\n\n        table.options.onColumnFiltersChange == null ? void 0 : table.options.onColumnFiltersChange(updateFn);\n      },\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange == null ? void 0 : table.options.onGlobalFilterChange(updater);\n      },\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(defaultState ? undefined : table.initialState.globalFilter);\n      },\n      resetColumnFilters: defaultState => {\n        var _table$initialState$c, _table$initialState;\n\n        table.setColumnFilters(defaultState ? [] : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) != null ? _table$initialState$c : []);\n      },\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table);\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n\n        return table._getFilteredRowModel();\n      },\n      _getGlobalFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, '__global__'),\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n\n        return table._getGlobalFacetedRowModel();\n      },\n      _getGlobalFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map();\n        }\n\n        return table._getGlobalFacetedUniqueValues();\n      },\n      _getGlobalFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return;\n        }\n\n        return table._getGlobalFacetedMinMaxValues();\n      }\n    };\n  }\n};\nfunction shouldAutoRemoveFilter(filterFn, value, column) {\n  return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === 'undefined' || typeof value === 'string' && !value;\n}\n\nconst sum = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId);\n    return sum + (typeof nextValue === 'number' ? nextValue : 0);\n  }, 0);\n};\n\nconst min = (columnId, _leafRows, childRows) => {\n  let min;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n\n    if (value != null && (min > value || min === undefined && value >= value)) {\n      min = value;\n    }\n  });\n  return min;\n};\n\nconst max = (columnId, _leafRows, childRows) => {\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n\n    if (value != null && (max < value || max === undefined && value >= value)) {\n      max = value;\n    }\n  });\n  return max;\n};\n\nconst extent = (columnId, _leafRows, childRows) => {\n  let min;\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value;\n      } else {\n        if (min > value) min = value;\n        if (max < value) max = value;\n      }\n    }\n  });\n  return [min, max];\n};\n\nconst mean = (columnId, leafRows) => {\n  let count = 0;\n  let sum = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n\n    if (value != null && (value = +value) >= value) {\n      ++count, sum += value;\n    }\n  });\n  if (count) return sum / count;\n  return;\n};\n\nconst median = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return;\n  }\n\n  let min = 0;\n  let max = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n\n    if (typeof value === 'number') {\n      min = Math.min(min, value);\n      max = Math.max(max, value);\n    }\n  });\n  return (min + max) / 2;\n};\n\nconst unique = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values());\n};\n\nconst uniqueCount = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size;\n};\n\nconst count = (_columnId, leafRows) => {\n  return leafRows.length;\n};\n\nconst aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count\n};\n\n//\nconst Grouping = {\n  getDefaultColumnDef: () => {\n    return {\n      aggregatedCell: props => {\n        var _toString, _props$getValue;\n\n        return (_toString = (_props$getValue = props.getValue()) == null ? void 0 : _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;\n      },\n      aggregationFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      grouping: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder'\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old != null && old.includes(column.id)) {\n            return old.filter(d => d !== column.id);\n          }\n\n          return [...(old != null ? old : []), column.id];\n        });\n      },\n      getCanGroup: () => {\n        var _ref, _ref2, _ref3, _column$columnDef$ena;\n\n        return (_ref = (_ref2 = (_ref3 = (_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) != null ? _ref3 : table.options.enableGrouping) != null ? _ref2 : true) != null ? _ref : !!column.accessorFn;\n      },\n      getIsGrouped: () => {\n        var _table$getState$group;\n\n        return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);\n      },\n      getGroupedIndex: () => {\n        var _table$getState$group2;\n\n        return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);\n      },\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup();\n        return () => {\n          if (!canGroup) return;\n          column.toggleGrouping();\n        };\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum;\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent;\n        }\n      },\n      getAggregationFn: () => {\n        var _table$options$aggreg, _table$options$aggreg2;\n\n        if (!column) {\n          throw new Error();\n        }\n\n        return isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === 'auto' ? column.getAutoAggregationFn() : (_table$options$aggreg = (_table$options$aggreg2 = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg2[column.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns[column.columnDef.aggregationFn];\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater),\n      resetGrouping: defaultState => {\n        var _table$initialState$g, _table$initialState;\n\n        table.setGrouping(defaultState ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);\n      },\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table);\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel();\n        }\n\n        return table._getGroupedRowModel();\n      }\n    };\n  },\n  createRow: row => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {}\n    };\n  },\n  createCell: (cell, column, row, table) => {\n\n    return {\n      getIsGrouped: () => column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () => {\n        var _row$subRows;\n\n        return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n      }\n    };\n  }\n};\nfunction orderColumns(leafColumns, grouping, groupedColumnMode) {\n  if (!(grouping != null && grouping.length) || !groupedColumnMode) {\n    return leafColumns;\n  }\n\n  const nonGroupingColumns = leafColumns.filter(col => !grouping.includes(col.id));\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns;\n  }\n\n  const groupingColumns = grouping.map(g => leafColumns.find(col => col.id === g)).filter(Boolean);\n  return [...groupingColumns, ...nonGroupingColumns];\n}\n\n//\nconst Ordering = {\n  getInitialState: state => {\n    return {\n      columnOrder: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table)\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater),\n      resetColumnOrder: defaultState => {\n        var _table$initialState$c;\n\n        table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);\n      },\n      _getOrderColumnsFn: memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => columns => {\n        // Sort grouped columns to the start of the column list\n        // before the headers are built\n        let orderedColumns = []; // If there is no order, return the normal columns\n\n        if (!(columnOrder != null && columnOrder.length)) {\n          orderedColumns = columns;\n        } else {\n          const columnOrderCopy = [...columnOrder]; // If there is an order, make a copy of the columns\n\n          const columnsCopy = [...columns]; // And make a new ordered array of the columns\n          // Loop over the columns and place them in order into the new array\n\n          while (columnsCopy.length && columnOrderCopy.length) {\n            const targetColumnId = columnOrderCopy.shift();\n            const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId);\n\n            if (foundIndex > -1) {\n              orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);\n            }\n          } // If there are any columns left, add them to the end\n\n\n          orderedColumns = [...orderedColumns, ...columnsCopy];\n        }\n\n        return orderColumns(orderedColumns, grouping, groupedColumnMode);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn' // debug: () => table.options.debugAll ?? table.options.debugTable,\n\n      })\n    };\n  }\n};\n\n//\nconst defaultPageIndex = 0;\nconst defaultPageSize = 10;\n\nconst getDefaultPaginationState = () => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize\n});\n\nconst Pagination = {\n  getInitialState: state => {\n    return { ...state,\n      pagination: { ...getDefaultPaginationState(),\n        ...(state == null ? void 0 : state.pagination)\n      }\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table)\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    return {\n      _autoResetPageIndex: () => {\n        var _ref, _table$options$autoRe;\n\n        if (!registered) {\n          table._queue(() => {\n            registered = true;\n          });\n\n          return;\n        }\n\n        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {\n          if (queued) return;\n          queued = true;\n\n          table._queue(() => {\n            table.resetPageIndex();\n            queued = false;\n          });\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater = old => {\n          let newState = functionalUpdate(updater, old);\n          return newState;\n        };\n\n        return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);\n      },\n      resetPagination: defaultState => {\n        var _table$initialState$p;\n\n        table.setPagination(defaultState ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex);\n          const maxPageIndex = typeof table.options.pageCount === 'undefined' || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex);\n          return { ...old,\n            pageIndex\n          };\n        });\n      },\n      resetPageIndex: defaultState => {\n        var _table$initialState$p2, _table$initialState, _table$initialState$p3;\n\n        table.setPageIndex(defaultState ? defaultPageIndex : (_table$initialState$p2 = (_table$initialState = table.initialState) == null ? void 0 : (_table$initialState$p3 = _table$initialState.pagination) == null ? void 0 : _table$initialState$p3.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);\n      },\n      resetPageSize: defaultState => {\n        var _table$initialState$p4, _table$initialState2, _table$initialState2$;\n\n        table.setPageSize(defaultState ? defaultPageSize : (_table$initialState$p4 = (_table$initialState2 = table.initialState) == null ? void 0 : (_table$initialState2$ = _table$initialState2.pagination) == null ? void 0 : _table$initialState2$.pageSize) != null ? _table$initialState$p4 : defaultPageSize);\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));\n          const topRowIndex = old.pageSize * old.pageIndex;\n          const pageIndex = Math.floor(topRowIndex / pageSize);\n          return { ...old,\n            pageIndex,\n            pageSize\n          };\n        });\n      },\n      setPageCount: updater => table.setPagination(old => {\n        var _table$options$pageCo;\n\n        let newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);\n\n        if (typeof newPageCount === 'number') {\n          newPageCount = Math.max(-1, newPageCount);\n        }\n\n        return { ...old,\n          pageCount: newPageCount\n        };\n      }),\n      getPageOptions: memo(() => [table.getPageCount()], pageCount => {\n        let pageOptions = [];\n\n        if (pageCount && pageCount > 0) {\n          pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i);\n        }\n\n        return pageOptions;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n        debug: () => {\n          var _table$options$debugA;\n\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n        }\n      }),\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n      getCanNextPage: () => {\n        const {\n          pageIndex\n        } = table.getState().pagination;\n        const pageCount = table.getPageCount();\n\n        if (pageCount === -1) {\n          return true;\n        }\n\n        if (pageCount === 0) {\n          return false;\n        }\n\n        return pageIndex < pageCount - 1;\n      },\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1);\n      },\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1;\n        });\n      },\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {\n          table._getPaginationRowModel = table.options.getPaginationRowModel(table);\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel();\n        }\n\n        return table._getPaginationRowModel();\n      },\n      getPageCount: () => {\n        var _table$options$pageCo2;\n\n        return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getPrePaginationRowModel().rows.length / table.getState().pagination.pageSize);\n      }\n    };\n  }\n};\n\n//\nconst getDefaultPinningState = () => ({\n  left: [],\n  right: []\n});\n\nconst Pinning = {\n  getInitialState: state => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      pin: position => {\n        const columnIds = column.getLeafColumns().map(d => d.id).filter(Boolean);\n        table.setColumnPinning(old => {\n          var _old$left3, _old$right3;\n\n          if (position === 'right') {\n            var _old$left, _old$right;\n\n            return {\n              left: ((_old$left = old == null ? void 0 : old.left) != null ? _old$left : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n              right: [...((_old$right = old == null ? void 0 : old.right) != null ? _old$right : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds]\n            };\n          }\n\n          if (position === 'left') {\n            var _old$left2, _old$right2;\n\n            return {\n              left: [...((_old$left2 = old == null ? void 0 : old.left) != null ? _old$left2 : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds],\n              right: ((_old$right2 = old == null ? void 0 : old.right) != null ? _old$right2 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n            };\n          }\n\n          return {\n            left: ((_old$left3 = old == null ? void 0 : old.left) != null ? _old$left3 : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n            right: ((_old$right3 = old == null ? void 0 : old.right) != null ? _old$right3 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n          };\n        });\n      },\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns();\n        return leafColumns.some(d => {\n          var _d$columnDef$enablePi, _table$options$enable;\n\n          return ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_table$options$enable = table.options.enablePinning) != null ? _table$options$enable : true);\n        });\n      },\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id);\n        const {\n          left,\n          right\n        } = table.getState().columnPinning;\n        const isLeft = leafColumnIds.some(d => left == null ? void 0 : left.includes(d));\n        const isRight = leafColumnIds.some(d => right == null ? void 0 : right.includes(d));\n        return isLeft ? 'left' : isRight ? 'right' : false;\n      },\n      getPinnedIndex: () => {\n        var _table$getState$colum, _table$getState$colum2, _table$getState$colum3;\n\n        const position = column.getIsPinned();\n        return position ? (_table$getState$colum = (_table$getState$colum2 = table.getState().columnPinning) == null ? void 0 : (_table$getState$colum3 = _table$getState$colum2[position]) == null ? void 0 : _table$getState$colum3.indexOf(column.id)) != null ? _table$getState$colum : -1 : 0;\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      getCenterVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left, right) => {\n        const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n        return allCells.filter(d => !leftAndRight.includes(d.column.id));\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getCenterVisibleCells',\n        debug: () => {\n          var _table$options$debugA;\n\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n        }\n      }),\n      getLeftVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left,,], (allCells, left) => {\n        const cells = (left != null ? left : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({ ...d,\n          position: 'left'\n        }));\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n        debug: () => {\n          var _table$options$debugA2;\n\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n        }\n      }),\n      getRightVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right) => {\n        const cells = (right != null ? right : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({ ...d,\n          position: 'left'\n        }));\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n        debug: () => {\n          var _table$options$debugA3;\n\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugRows;\n        }\n      })\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnPinning: updater => table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater),\n      resetColumnPinning: defaultState => {\n        var _table$initialState$c, _table$initialState;\n\n        return table.setColumnPinning(defaultState ? getDefaultPinningState() : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) != null ? _table$initialState$c : getDefaultPinningState());\n      },\n      getIsSomeColumnsPinned: position => {\n        var _pinningState$positio;\n\n        const pinningState = table.getState().columnPinning;\n\n        if (!position) {\n          var _pinningState$left, _pinningState$right;\n\n          return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));\n        }\n\n        return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n      },\n      getLeftLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left) => {\n        return (left != null ? left : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n        debug: () => {\n          var _table$options$debugA4;\n\n          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n        }\n      }),\n      getRightLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right) => {\n        return (right != null ? right : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n        debug: () => {\n          var _table$options$debugA5;\n\n          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n        }\n      }),\n      getCenterLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left, right) => {\n        const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n        return allColumns.filter(d => !leftAndRight.includes(d.id));\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n        debug: () => {\n          var _table$options$debugA6;\n\n          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugColumns;\n        }\n      })\n    };\n  }\n};\n\n//\nconst RowSelection = {\n  getInitialState: state => {\n    return {\n      rowSelection: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n\n    };\n  },\n  createTable: table => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater),\n      resetRowSelection: defaultState => {\n        var _table$initialState$r;\n\n        return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});\n      },\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected();\n          const rowSelection = { ...old\n          };\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows; // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return;\n              }\n\n              rowSelection[row.id] = true;\n            });\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id];\n            });\n          }\n\n          return rowSelection;\n        });\n      },\n      toggleAllPageRowsSelected: value => table.setRowSelection(old => {\n        const resolvedValue = typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected();\n        const rowSelection = { ...old\n        };\n        table.getRowModel().rows.forEach(row => {\n          mutateRowIsSelected(rowSelection, row.id, resolvedValue, table);\n        });\n        return rowSelection;\n      }),\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n      //   let include = false\n      //   const selectedRowIds = {}\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA;\n\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n        }\n      }),\n      getFilteredSelectedRowModel: memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getFilteredSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA2;\n\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugTable;\n        }\n      }),\n      getGroupedSelectedRowModel: memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getGroupedSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA3;\n\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugTable;\n        }\n      }),\n      ///\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows;\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);\n\n        if (isAllRowsSelected) {\n          if (preGroupedFlatRows.some(row => row.getCanSelect() && !rowSelection[row.id])) {\n            isAllRowsSelected = false;\n          }\n        }\n\n        return isAllRowsSelected;\n      },\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows;\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllPageRowsSelected = !!paginationFlatRows.length;\n\n        if (isAllPageRowsSelected && paginationFlatRows.some(row => !rowSelection[row.id])) {\n          isAllPageRowsSelected = false;\n        }\n\n        return isAllPageRowsSelected;\n      },\n      getIsSomeRowsSelected: () => {\n        var _table$getState$rowSe;\n\n        const totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;\n        return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;\n      },\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows;\n        return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.some(d => d.getIsSelected() || d.getIsSomeSelected());\n      },\n      getToggleAllRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllRowsSelected(e.target.checked);\n        };\n      },\n      getToggleAllPageRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllPageRowsSelected(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected();\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected;\n\n          if (isSelected === value) {\n            return old;\n          }\n\n          const selectedRowIds = { ...old\n          };\n          mutateRowIsSelected(selectedRowIds, row.id, value, table);\n          return selectedRowIds;\n        });\n      },\n      getIsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isRowSelected(row, rowSelection);\n      },\n      getIsSomeSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'some';\n      },\n      getIsAllSubRowsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'all';\n      },\n      getCanSelect: () => {\n        var _table$options$enable;\n\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row);\n        }\n\n        return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;\n      },\n      getCanSelectSubRows: () => {\n        var _table$options$enable2;\n\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row);\n        }\n\n        return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;\n      },\n      getCanMultiSelect: () => {\n        var _table$options$enable3;\n\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row);\n        }\n\n        return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect();\n        return e => {\n          var _target;\n\n          if (!canSelect) return;\n          row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);\n        };\n      }\n    };\n  }\n};\n\nconst mutateRowIsSelected = (selectedRowIds, id, value, table) => {\n  var _row$subRows;\n\n  const row = table.getRow(id); // const isGrouped = row.getIsGrouped()\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key]);\n    }\n\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true;\n    }\n  } else {\n    delete selectedRowIds[id];\n  } // }\n\n\n  if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row => mutateRowIsSelected(selectedRowIds, row.id, value, table));\n  }\n};\n\nfunction selectRowsFn(table, rowModel) {\n  const rowSelection = table.getState().rowSelection;\n  const newSelectedFlatRows = [];\n  const newSelectedRowsById = {}; // Filters top level and nested rows\n\n  const recurseRows = function (rows, depth) {\n\n    return rows.map(row => {\n      var _row$subRows2;\n\n      const isSelected = isRowSelected(row, rowSelection);\n\n      if (isSelected) {\n        newSelectedFlatRows.push(row);\n        newSelectedRowsById[row.id] = row;\n      }\n\n      if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n        row = { ...row,\n          subRows: recurseRows(row.subRows)\n        };\n      }\n\n      if (isSelected) {\n        return row;\n      }\n    }).filter(Boolean);\n  };\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById\n  };\n}\nfunction isRowSelected(row, selection) {\n  var _selection$row$id;\n\n  return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;\n}\nfunction isSubRowSelected(row, selection, table) {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true;\n    let someSelected = false;\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return;\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    });\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false;\n  }\n\n  return false;\n}\n\nconst reSplitAlphaNumeric = /([0-9]+)/gm;\n\nconst alphanumeric = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\n\nconst alphanumericCaseSensitive = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n}; // The text filter is more basic (less numeric support)\n// but is much faster\n\n\nconst text = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n}; // The text filter is more basic (less numeric support)\n// but is much faster\n\n\nconst textCaseSensitive = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\n\nconst datetime = (rowA, rowB, columnId) => {\n  const a = rowA.getValue(columnId);\n  const b = rowB.getValue(columnId); // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n\n  return a > b ? 1 : a < b ? -1 : 0;\n};\n\nconst basic = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));\n}; // Utils\n\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n\n    return String(a);\n  }\n\n  if (typeof a === 'string') {\n    return a;\n  }\n\n  return '';\n} // Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\n\n\nfunction compareAlphanumeric(aStr, bStr) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean); // While\n\n  while (a.length && b.length) {\n    const aa = a.shift();\n    const bb = b.shift();\n    const an = parseInt(aa, 10);\n    const bn = parseInt(bb, 10);\n    const combo = [an, bn].sort(); // Both are string\n\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n\n      if (bb > aa) {\n        return -1;\n      }\n\n      continue;\n    } // One is a string, one is a number\n\n\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    } // Both are numbers\n\n\n    if (an > bn) {\n      return 1;\n    }\n\n    if (bn > an) {\n      return -1;\n    }\n  }\n\n  return a.length - b.length;\n} // Exports\n\n\nconst sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic\n};\n\n//\nconst Sorting = {\n  getInitialState: state => {\n    return {\n      sorting: [],\n      ...state\n    };\n  },\n  getDefaultColumnDef: () => {\n    return {\n      sortingFn: 'auto'\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: e => {\n        return e.shiftKey;\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10);\n        let isString = false;\n\n        for (const row of firstRows) {\n          const value = row == null ? void 0 : row.getValue(column.id);\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime;\n          }\n\n          if (typeof value === 'string') {\n            isString = true;\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric;\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text;\n        }\n\n        return sortingFns.basic;\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n\n        if (typeof value === 'string') {\n          return 'asc';\n        }\n\n        return 'desc';\n      },\n      getSortingFn: () => {\n        var _table$options$sortin, _table$options$sortin2;\n\n        if (!column) {\n          throw new Error();\n        }\n\n        return isFunction(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === 'auto' ? column.getAutoSortingFn() : (_table$options$sortin = (_table$options$sortin2 = table.options.sortingFns) == null ? void 0 : _table$options$sortin2[column.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns[column.columnDef.sortingFn];\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder();\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null;\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old == null ? void 0 : old.find(d => d.id === column.id);\n          const existingIndex = old == null ? void 0 : old.findIndex(d => d.id === column.id);\n          let newSorting = []; // What should we do with this sort action?\n\n          let sortAction;\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'; // Multi-mode\n\n          if (old != null && old.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'add';\n            }\n          } else {\n            // Normal mode\n            if (old != null && old.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace';\n            } else if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'replace';\n            }\n          } // Handle toggle states that will remove the sorting\n\n\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove';\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            var _table$options$maxMul;\n\n            newSorting = [...old, {\n              id: column.id,\n              desc: nextDesc\n            }]; // Take latest n columns\n\n            newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return { ...d,\n                  desc: nextDesc\n                };\n              }\n\n              return d;\n            });\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id);\n          } else {\n            newSorting = [{\n              id: column.id,\n              desc: nextDesc\n            }];\n          }\n\n          return newSorting;\n        });\n      },\n      getFirstSortDir: () => {\n        var _ref, _column$columnDef$sor;\n\n        const sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === 'desc';\n        return sortDescFirst ? 'desc' : 'asc';\n      },\n      getNextSortingOrder: multi => {\n        var _table$options$enable, _table$options$enable2;\n\n        const firstSortDirection = column.getFirstSortDir();\n        const isSorted = column.getIsSorted();\n\n        if (!isSorted) {\n          return firstSortDirection;\n        }\n\n        if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && ( // If enableSortRemove, enable in general\n        multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false;\n        }\n\n        return isSorted === 'desc' ? 'asc' : 'desc';\n      },\n      getCanSort: () => {\n        var _column$columnDef$ena, _table$options$enable3;\n\n        return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;\n      },\n      getCanMultiSort: () => {\n        var _ref2, _column$columnDef$ena2;\n\n        return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;\n      },\n      getIsSorted: () => {\n        var _table$getState$sorti;\n\n        const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find(d => d.id === column.id);\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc';\n      },\n      getSortIndex: () => {\n        var _table$getState$sorti2, _table$getState$sorti3;\n\n        return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex(d => d.id === column.id)) != null ? _table$getState$sorti2 : -1;\n      },\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old => old != null && old.length ? old.filter(d => d.id !== column.id) : []);\n      },\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort();\n        return e => {\n          if (!canSort) return;\n          e.persist == null ? void 0 : e.persist();\n          column.toggleSorting == null ? void 0 : column.toggleSorting(undefined, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);\n        };\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setSorting: updater => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater),\n      resetSorting: defaultState => {\n        var _table$initialState$s, _table$initialState;\n\n        table.setSorting(defaultState ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table);\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel();\n        }\n\n        return table._getSortedRowModel();\n      }\n    };\n  }\n};\n\n//\nconst Visibility = {\n  getInitialState: state => {\n    return {\n      columnVisibility: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({ ...old,\n            [column.id]: value != null ? value : !column.getIsVisible()\n          }));\n        }\n      },\n      getIsVisible: () => {\n        var _table$getState$colum, _table$getState$colum2;\n\n        return (_table$getState$colum = (_table$getState$colum2 = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum2[column.id]) != null ? _table$getState$colum : true;\n      },\n      getCanHide: () => {\n        var _column$columnDef$ena, _table$options$enable;\n\n        return ((_column$columnDef$ena = column.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);\n      },\n      getToggleVisibilityHandler: () => {\n        return e => {\n          column.toggleVisibility == null ? void 0 : column.toggleVisibility(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      _getAllVisibleCells: memo(() => [row.getAllCells(), table.getState().columnVisibility], cells => {\n        return cells.filter(cell => cell.column.getIsVisible());\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n        debug: () => {\n          var _table$options$debugA;\n\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n        }\n      }),\n      getVisibleCells: memo(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left, center, right) => [...left, ...center, ...right], {\n        key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n        debug: () => {\n          var _table$options$debugA2;\n\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n        }\n      })\n    };\n  },\n  createTable: table => {\n    const makeVisibleColumnsMethod = (key, getColumns) => {\n      return memo(() => [getColumns(), getColumns().filter(d => d.getIsVisible()).map(d => d.id).join('_')], columns => {\n        return columns.filter(d => d.getIsVisible == null ? void 0 : d.getIsVisible());\n      }, {\n        key,\n        debug: () => {\n          var _table$options$debugA3;\n\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n        }\n      });\n    };\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod('getVisibleFlatColumns', () => table.getAllFlatColumns()),\n      getVisibleLeafColumns: makeVisibleColumnsMethod('getVisibleLeafColumns', () => table.getAllLeafColumns()),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod('getLeftVisibleLeafColumns', () => table.getLeftLeafColumns()),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod('getRightVisibleLeafColumns', () => table.getRightLeafColumns()),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod('getCenterVisibleLeafColumns', () => table.getCenterLeafColumns()),\n      setColumnVisibility: updater => table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater),\n      resetColumnVisibility: defaultState => {\n        var _table$initialState$c;\n\n        table.setColumnVisibility(defaultState ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});\n      },\n      toggleAllColumnsVisible: value => {\n        var _value;\n\n        value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();\n        table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column) => ({ ...obj,\n          [column.id]: !value ? !(column.getCanHide != null && column.getCanHide()) : value\n        }), {}));\n      },\n      getIsAllColumnsVisible: () => !table.getAllLeafColumns().some(column => !(column.getIsVisible != null && column.getIsVisible())),\n      getIsSomeColumnsVisible: () => table.getAllLeafColumns().some(column => column.getIsVisible == null ? void 0 : column.getIsVisible()),\n      getToggleAllColumnsVisibilityHandler: () => {\n        return e => {\n          var _target;\n\n          table.toggleAllColumnsVisible((_target = e.target) == null ? void 0 : _target.checked);\n        };\n      }\n    };\n  }\n};\n\nconst features = [Headers, Visibility, Ordering, Pinning, Filters, Sorting, Grouping, Expanding, Pagination, RowSelection, ColumnSizing]; //\n\nfunction createTable(options) {\n  var _options$initialState;\n\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...');\n  }\n\n  let table = {\n    _features: features\n  };\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));\n  }, {});\n\n  const mergeOptions = options => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options);\n    }\n\n    return { ...defaultOptions,\n      ...options\n    };\n  };\n\n  const coreInitialState = {};\n  let initialState = { ...coreInitialState,\n    ...((_options$initialState = options.initialState) != null ? _options$initialState : {})\n  };\n\n  table._features.forEach(feature => {\n    var _feature$getInitialSt;\n\n    initialState = (_feature$getInitialSt = feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) != null ? _feature$getInitialSt : initialState;\n  });\n\n  const queued = [];\n  let queuedTimeout = false;\n  const coreInstance = {\n    _features: features,\n    options: { ...defaultOptions,\n      ...options\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb);\n\n      if (!queuedTimeout) {\n        queuedTimeout = true; // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n\n        Promise.resolve().then(() => {\n          while (queued.length) {\n            queued.shift()();\n          }\n\n          queuedTimeout = false;\n        }).catch(error => setTimeout(() => {\n          throw error;\n        }));\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState);\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options);\n      table.options = mergeOptions(newOptions);\n    },\n    getState: () => {\n      return table.options.state;\n    },\n    setState: updater => {\n      table.options.onStateChange == null ? void 0 : table.options.onStateChange(updater);\n    },\n    _getRowId: (row, index, parent) => {\n      var _table$options$getRow;\n\n      return (_table$options$getRow = table.options.getRowId == null ? void 0 : table.options.getRowId(row, index, parent)) != null ? _table$options$getRow : \"\" + (parent ? [parent.id, index].join('.') : index);\n    },\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table);\n      }\n\n      return table._getCoreRowModel();\n    },\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n    getRowModel: () => {\n      return table.getPaginationRowModel();\n    },\n    getRow: id => {\n      const row = table.getRowModel().rowsById[id];\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\"getRow expected an ID, but got \" + id);\n        }\n\n        throw new Error();\n      }\n\n      return row;\n    },\n    _getDefaultColumnDef: memo(() => [table.options.defaultColumn], defaultColumn => {\n      var _defaultColumn;\n\n      defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};\n      return {\n        header: props => {\n          const resolvedColumnDef = props.header.column.columnDef;\n\n          if (resolvedColumnDef.accessorKey) {\n            return resolvedColumnDef.accessorKey;\n          }\n\n          if (resolvedColumnDef.accessorFn) {\n            return resolvedColumnDef.id;\n          }\n\n          return null;\n        },\n        // footer: props => props.header.column.id,\n        cell: props => {\n          var _props$renderValue$to, _props$renderValue;\n\n          return (_props$renderValue$to = (_props$renderValue = props.renderValue()) == null ? void 0 : _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) != null ? _props$renderValue$to : null;\n        },\n        ...table._features.reduce((obj, feature) => {\n          return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());\n        }, {}),\n        ...defaultColumn\n      };\n    }, {\n      debug: () => {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      },\n      key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef'\n    }),\n    _getColumnDefs: () => table.options.columns,\n    getAllColumns: memo(() => [table._getColumnDefs()], columnDefs => {\n      const recurseColumns = function (columnDefs, parent, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n\n        return columnDefs.map(columnDef => {\n          const column = createColumn(table, columnDef, depth, parent);\n          const groupingColumnDef = columnDef;\n          column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];\n          return column;\n        });\n      };\n\n      return recurseColumns(columnDefs);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n      debug: () => {\n        var _table$options$debugA2;\n\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    }),\n    getAllFlatColumns: memo(() => [table.getAllColumns()], allColumns => {\n      return allColumns.flatMap(column => {\n        return column.getFlatColumns();\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n      debug: () => {\n        var _table$options$debugA3;\n\n        return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n      }\n    }),\n    _getAllFlatColumnsById: memo(() => [table.getAllFlatColumns()], flatColumns => {\n      return flatColumns.reduce((acc, column) => {\n        acc[column.id] = column;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n      debug: () => {\n        var _table$options$debugA4;\n\n        return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n      }\n    }),\n    getAllLeafColumns: memo(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns) => {\n      let leafColumns = allColumns.flatMap(column => column.getLeafColumns());\n      return orderColumns(leafColumns);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n      debug: () => {\n        var _table$options$debugA5;\n\n        return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n      }\n    }),\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId];\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\"[Table] Column with id \" + columnId + \" does not exist.\");\n        }\n\n        throw new Error();\n      }\n\n      return column;\n    }\n  };\n  Object.assign(table, coreInstance);\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable == null ? void 0 : feature.createTable(table));\n  });\n\n  return table;\n}\n\nfunction createCell(table, row, column, columnId) {\n  const getRenderValue = () => {\n    var _cell$getValue;\n\n    return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;\n  };\n\n  const cell = {\n    id: row.id + \"_\" + column.id,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: () => ({\n      table,\n      column,\n      row,\n      cell: cell,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue\n    })\n  };\n\n  table._features.forEach(feature => {\n    Object.assign(cell, feature.createCell == null ? void 0 : feature.createCell(cell, column, row, table));\n  }, {});\n\n  return cell;\n}\n\nconst createRow = (table, id, original, rowIndex, depth, subRows) => {\n  let row = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId];\n      }\n\n      const column = table.getColumn(columnId);\n\n      if (!column.accessorFn) {\n        return undefined;\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);\n      return row._valuesCache[columnId];\n    },\n    renderValue: columnId => {\n      var _row$getValue;\n\n      return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;\n    },\n    subRows: subRows != null ? subRows : [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(() => [table.getAllLeafColumns()], leafColumns => {\n      return leafColumns.map(column => {\n        return createCell(table, row, column, column.id);\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n      debug: () => {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n      }\n    }),\n    _getAllCellsByColumnId: memo(() => [row.getAllCells()], allCells => {\n      return allCells.reduce((acc, cell) => {\n        acc[cell.column.id] = cell;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n      debug: () => {\n        var _table$options$debugA2;\n\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n      }\n    })\n  };\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i];\n    Object.assign(row, feature == null ? void 0 : feature.createRow == null ? void 0 : feature.createRow(row, table));\n  }\n\n  return row;\n};\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n// const helper = createColumnHelper<Person>()\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\nfunction createColumnHelper() {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function' ? { ...column,\n        accessorFn: accessor\n      } : { ...column,\n        accessorKey: accessor\n      };\n    },\n    display: column => column,\n    group: column => column\n  };\n}\n\nfunction getCoreRowModel() {\n  return table => memo(() => [table.options.data], data => {\n    const rowModel = {\n      rows: [],\n      flatRows: [],\n      rowsById: {}\n    };\n\n    const accessRows = function (originalRows, depth, parent) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n\n      const rows = [];\n\n      for (let i = 0; i < originalRows.length; i++) {\n        // This could be an expensive check at scale, so we should move it somewhere else, but where?\n        // if (!id) {\n        //   if (process.env.NODE_ENV !== 'production') {\n        //     throw new Error(`getRowId expected an ID, but got ${id}`)\n        //   }\n        // }\n        // Make the row\n        const row = createRow(table, table._getRowId(originalRows[i], i, parent), originalRows[i], i, depth); // Keep track of every row in a flat array\n\n        rowModel.flatRows.push(row); // Also keep track of every row by its ID\n\n        rowModel.rowsById[row.id] = row; // Push table row into parent\n\n        rows.push(row); // Get the original subrows\n\n        if (table.options.getSubRows) {\n          var _row$originalSubRows;\n\n          row.originalSubRows = table.options.getSubRows(originalRows[i], i); // Then recursively access them\n\n          if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {\n            row.subRows = accessRows(row.originalSubRows, depth + 1, row);\n          }\n        }\n      }\n\n      return rows;\n    };\n\n    rowModel.rows = accessRows(data);\n    return rowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getRowModel',\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction filterRows(rows, filterRowImpl, table) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table);\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table);\n}\nfunction filterRowModelFromLeafs(rowsToFilter, filterRow, table) {\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n\n  const recurseFilterRows = function (rowsToFilter, depth) {\n\n    const rows = []; // Filter from children up first\n\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      var _row$subRows;\n\n      let row = rowsToFilter[i];\n\n      if ((_row$subRows = row.subRows) != null && _row$subRows.length) {\n        const newRow = createRow(table, row.id, row.original, row.index, row.depth);\n        newRow.columnFilters = row.columnFilters;\n        newRow.subRows = recurseFilterRows(row.subRows);\n\n        if (!newRow.subRows.length) {\n          continue;\n        }\n\n        row = newRow;\n      }\n\n      if (filterRow(row)) {\n        rows.push(row);\n        newFilteredRowsById[row.id] = row;\n        newFilteredRowsById[i] = row;\n      }\n    }\n\n    return rows;\n  };\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\nfunction filterRowModelFromRoot(rowsToFilter, filterRow, table) {\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {}; // Filters top level and nested rows\n\n  const recurseFilterRows = function (rowsToFilter, depth) {\n\n    // Filter from parents downward first\n    const rows = []; // Apply the filter to any subRows\n\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i];\n      const pass = filterRow(row);\n\n      if (pass) {\n        var _row$subRows2;\n\n        if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n          const newRow = createRow(table, row.id, row.original, row.index, row.depth);\n          newRow.subRows = recurseFilterRows(row.subRows);\n          row = newRow;\n        }\n\n        rows.push(row);\n        newFilteredFlatRows.push(row);\n        newFilteredRowsById[row.id] = row;\n      }\n    }\n\n    return rows;\n  };\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\n\nfunction getFilteredRowModel() {\n  return table => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter], (rowModel, columnFilters, globalFilter) => {\n    if (!rowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      for (let i = 0; i < rowModel.flatRows.length; i++) {\n        rowModel.flatRows[i].columnFilters = {};\n        rowModel.flatRows[i].columnFiltersMeta = {};\n      }\n\n      return rowModel;\n    }\n\n    const resolvedColumnFilters = [];\n    const resolvedGlobalFilters = [];\n    (columnFilters != null ? columnFilters : []).forEach(d => {\n      var _filterFn$resolveFilt;\n\n      const column = table.getColumn(d.id);\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\"Table: Could not find a column to filter with columnId: \" + d.id);\n        }\n      }\n\n      const filterFn = column.getFilterFn();\n\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\"Could not find a valid 'column.filterFn' for column with the ID: \" + column.id + \".\");\n        }\n\n        return;\n      }\n\n      resolvedColumnFilters.push({\n        id: d.id,\n        filterFn,\n        resolvedValue: (_filterFn$resolveFilt = filterFn.resolveFilterValue == null ? void 0 : filterFn.resolveFilterValue(d.value)) != null ? _filterFn$resolveFilt : d.value\n      });\n    });\n    const filterableIds = columnFilters.map(d => d.id);\n    const globalFilterFn = table.getGlobalFilterFn();\n    const globallyFilterableColumns = table.getAllLeafColumns().filter(column => column.getCanGlobalFilter());\n\n    if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {\n      filterableIds.push('__global__');\n      globallyFilterableColumns.forEach(column => {\n        var _globalFilterFn$resol;\n\n        resolvedGlobalFilters.push({\n          id: column.id,\n          filterFn: globalFilterFn,\n          resolvedValue: (_globalFilterFn$resol = globalFilterFn.resolveFilterValue == null ? void 0 : globalFilterFn.resolveFilterValue(globalFilter)) != null ? _globalFilterFn$resol : globalFilter\n        });\n      });\n    }\n\n    let currentColumnFilter;\n    let currentGlobalFilter; // Flag the prefiltered row model with each filter state\n\n    for (let j = 0; j < rowModel.flatRows.length; j++) {\n      const row = rowModel.flatRows[j];\n      row.columnFilters = {};\n\n      if (resolvedColumnFilters.length) {\n        for (let i = 0; i < resolvedColumnFilters.length; i++) {\n          currentColumnFilter = resolvedColumnFilters[i];\n          const id = currentColumnFilter.id; // Tag the row with the column filter state\n\n          row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          });\n        }\n      }\n\n      if (resolvedGlobalFilters.length) {\n        for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n          currentGlobalFilter = resolvedGlobalFilters[i];\n          const id = currentGlobalFilter.id; // Tag the row with the first truthy global filter state\n\n          if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          })) {\n            row.columnFilters.__global__ = true;\n            break;\n          }\n        }\n\n        if (row.columnFilters.__global__ !== true) {\n          row.columnFilters.__global__ = false;\n        }\n      }\n    }\n\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n\n      return true;\n    }; // Filter final rows using all of the active filters\n\n\n    return filterRows(rowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction getFacetedRowModel() {\n  return (table, columnId) => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter, table.getFilteredRowModel()], (preRowModel, columnFilters, globalFilter) => {\n    if (!preRowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      return preRowModel;\n    }\n\n    const filterableIds = [...columnFilters.map(d => d.id).filter(d => d !== columnId), globalFilter ? '__global__' : undefined].filter(Boolean);\n\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    return filterRows(preRowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedRowModel_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getFacetedUniqueValues() {\n  return (table, columnId) => memo(() => [table.getColumn(columnId).getFacetedRowModel()], facetedRowModel => {\n    let facetedUniqueValues = new Map();\n\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      var _facetedRowModel$flat;\n\n      const value = (_facetedRowModel$flat = facetedRowModel.flatRows[i]) == null ? void 0 : _facetedRowModel$flat.getValue(columnId);\n\n      if (facetedUniqueValues.has(value)) {\n        var _facetedUniqueValues$;\n\n        facetedUniqueValues.set(value, ((_facetedUniqueValues$ = facetedUniqueValues.get(value)) != null ? _facetedUniqueValues$ : 0) + 1);\n      } else {\n        facetedUniqueValues.set(value, 1);\n      }\n    }\n\n    return facetedUniqueValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedUniqueValues_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getFacetedMinMaxValues() {\n  return (table, columnId) => memo(() => [table.getColumn(columnId).getFacetedRowModel()], facetedRowModel => {\n    var _facetedRowModel$flat;\n\n    const firstValue = (_facetedRowModel$flat = facetedRowModel.flatRows[0]) == null ? void 0 : _facetedRowModel$flat.getValue(columnId);\n\n    if (typeof firstValue === 'undefined') {\n      return undefined;\n    }\n\n    let facetedMinMaxValues = [firstValue, firstValue];\n\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const value = facetedRowModel.flatRows[i].getValue(columnId);\n\n      if (value < facetedMinMaxValues[0]) {\n        facetedMinMaxValues[0] = value;\n      } else if (value > facetedMinMaxValues[1]) {\n        facetedMinMaxValues[1] = value;\n      }\n    }\n\n    return facetedMinMaxValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedMinMaxValues_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getSortedRowModel() {\n  return table => memo(() => [table.getState().sorting, table.getPreSortedRowModel()], (sorting, rowModel) => {\n    if (!rowModel.rows.length || !(sorting != null && sorting.length)) {\n      return rowModel;\n    }\n\n    const sortingState = table.getState().sorting;\n    const sortedFlatRows = []; // Filter out sortings that correspond to non existing columns\n\n    const availableSorting = sortingState.filter(sort => table.getColumn(sort.id).getCanSort());\n    const columnInfoById = {};\n    availableSorting.forEach(sortEntry => {\n      const column = table.getColumn(sortEntry.id);\n      columnInfoById[sortEntry.id] = {\n        sortUndefined: column.columnDef.sortUndefined,\n        invertSorting: column.columnDef.invertSorting,\n        sortingFn: column.getSortingFn()\n      };\n    });\n\n    const sortData = rows => {\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = rows.slice();\n      sortedData.sort((rowA, rowB) => {\n        for (let i = 0; i < availableSorting.length; i += 1) {\n          var _sortEntry$desc;\n\n          const sortEntry = availableSorting[i];\n          const columnInfo = columnInfoById[sortEntry.id];\n          const isDesc = (_sortEntry$desc = sortEntry == null ? void 0 : sortEntry.desc) != null ? _sortEntry$desc : false;\n\n          if (columnInfo.sortUndefined) {\n            const aValue = rowA.getValue(sortEntry.id);\n            const bValue = rowB.getValue(sortEntry.id);\n            const aUndefined = typeof aValue === 'undefined';\n            const bUndefined = typeof bValue === 'undefined';\n\n            if (aUndefined || bUndefined) {\n              return aUndefined && bUndefined ? 0 : aUndefined ? columnInfo.sortUndefined : -columnInfo.sortUndefined;\n            }\n          } // This function should always return in ascending order\n\n\n          let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);\n\n          if (sortInt !== 0) {\n            if (isDesc) {\n              sortInt *= -1;\n            }\n\n            if (columnInfo.invertSorting) {\n              sortInt *= -1;\n            }\n\n            return sortInt;\n          }\n        }\n\n        return rowA.index - rowB.index;\n      }); // If there are sub-rows, sort them\n\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row);\n\n        if (!row.subRows || row.subRows.length <= 1) {\n          return;\n        }\n\n        row.subRows = sortData(row.subRows);\n      });\n      return sortedData;\n    };\n\n    return {\n      rows: sortData(rowModel.rows),\n      flatRows: sortedFlatRows,\n      rowsById: rowModel.rowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction getGroupedRowModel() {\n  return table => memo(() => [table.getState().grouping, table.getPreGroupedRowModel()], (grouping, rowModel) => {\n    if (!rowModel.rows.length || !grouping.length) {\n      return rowModel;\n    } // Filter the grouping list down to columns that exist\n\n\n    const existingGrouping = grouping.filter(columnId => table.getColumn(columnId));\n    const groupedFlatRows = [];\n    const groupedRowsById = {}; // const onlyGroupedFlatRows: Row[] = [];\n    // const onlyGroupedRowsById: Record<RowId, Row> = {};\n    // const nonGroupedFlatRows: Row[] = [];\n    // const nonGroupedRowsById: Record<RowId, Row> = {};\n    // Recursively group the data\n\n    const groupUpRecursively = function (rows, depth, parentId) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n\n      // Grouping depth has been been met\n      // Stop grouping and simply rewrite thd depth and row relationships\n      if (depth >= existingGrouping.length) {\n        return rows.map(row => {\n          row.depth = depth;\n          groupedFlatRows.push(row);\n          groupedRowsById[row.id] = row;\n\n          if (row.subRows) {\n            row.subRows = groupUpRecursively(row.subRows, depth + 1);\n          }\n\n          return row;\n        });\n      }\n\n      const columnId = existingGrouping[depth]; // Group the rows together for this level\n\n      const rowGroupsMap = groupBy(rows, columnId); // Peform aggregations for each group\n\n      const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map((_ref, index) => {\n        let [groupingValue, groupedRows] = _ref;\n        let id = columnId + \":\" + groupingValue;\n        id = parentId ? parentId + \">\" + id : id; // First, Recurse to group sub rows before aggregation\n\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id); // Flatten the leaf rows of the rows in this group\n\n        const leafRows = depth ? flattenBy(groupedRows, row => row.subRows) : groupedRows;\n        const row = createRow(table, id, leafRows[0].original, index, depth);\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n          getValue: columnId => {\n            // Don't aggregate columns that are in the grouping\n            if (existingGrouping.includes(columnId)) {\n              if (row._valuesCache.hasOwnProperty(columnId)) {\n                return row._valuesCache[columnId];\n              }\n\n              if (groupedRows[0]) {\n                var _groupedRows$0$getVal;\n\n                row._valuesCache[columnId] = (_groupedRows$0$getVal = groupedRows[0].getValue(columnId)) != null ? _groupedRows$0$getVal : undefined;\n              }\n\n              return row._valuesCache[columnId];\n            }\n\n            if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n              return row._groupingValuesCache[columnId];\n            } // Aggregate the values\n\n\n            const column = table.getColumn(columnId);\n            const aggregateFn = column.getAggregationFn();\n\n            if (aggregateFn) {\n              row._groupingValuesCache[columnId] = aggregateFn(columnId, leafRows, groupedRows);\n              return row._groupingValuesCache[columnId];\n            }\n          }\n        });\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow);\n          groupedRowsById[subRow.id] = subRow; // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        });\n        return row;\n      });\n      return aggregatedGroupedRows;\n    };\n\n    const groupedRows = groupUpRecursively(rowModel.rows, 0, '');\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow);\n      groupedRowsById[subRow.id] = subRow; // if (subRow.getIsGrouped?.()) {\n      //   onlyGroupedFlatRows.push(subRow);\n      //   onlyGroupedRowsById[subRow.id] = subRow;\n      // } else {\n      //   nonGroupedFlatRows.push(subRow);\n      //   nonGroupedRowsById[subRow.id] = subRow;\n      // }\n    });\n    return {\n      rows: groupedRows,\n      flatRows: groupedFlatRows,\n      rowsById: groupedRowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._queue(() => {\n        table._autoResetExpanded();\n\n        table._autoResetPageIndex();\n      });\n    }\n  });\n}\n\nfunction groupBy(rows, columnId) {\n  const groupMap = new Map();\n  return rows.reduce((map, row) => {\n    const resKey = \"\" + row.getValue(columnId);\n    const previous = map.get(resKey);\n\n    if (!previous) {\n      map.set(resKey, [row]);\n    } else {\n      map.set(resKey, [...previous, row]);\n    }\n\n    return map;\n  }, groupMap);\n}\n\nfunction getExpandedRowModel() {\n  return table => memo(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {\n    if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {\n      return rowModel;\n    }\n\n    if (!paginateExpandedRows) {\n      // Only expand rows at this point if they are being paginated\n      return rowModel;\n    }\n\n    return expandRows(rowModel);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    }\n  });\n}\nfunction expandRows(rowModel) {\n  const expandedRows = [];\n\n  const handleRow = row => {\n    var _row$subRows;\n\n    expandedRows.push(row);\n\n    if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n\n  rowModel.rows.forEach(handleRow);\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById\n  };\n}\n\nfunction getPaginationRowModel(opts) {\n  return table => memo(() => [table.getState().pagination, table.getPrePaginationRowModel(), table.options.paginateExpandedRows ? undefined : table.getState().expanded], (pagination, rowModel) => {\n    if (!rowModel.rows.length) {\n      return rowModel;\n    }\n\n    const {\n      pageSize,\n      pageIndex\n    } = pagination;\n    let {\n      rows,\n      flatRows,\n      rowsById\n    } = rowModel;\n    const pageStart = pageSize * pageIndex;\n    const pageEnd = pageStart + pageSize;\n    rows = rows.slice(pageStart, pageEnd);\n    let paginatedRowModel;\n\n    if (!table.options.paginateExpandedRows) {\n      paginatedRowModel = expandRows({\n        rows,\n        flatRows,\n        rowsById\n      });\n    } else {\n      paginatedRowModel = {\n        rows,\n        flatRows,\n        rowsById\n      };\n    }\n\n    paginatedRowModel.flatRows = [];\n\n    const handleRow = row => {\n      paginatedRowModel.flatRows.push(row);\n\n      if (row.subRows.length) {\n        row.subRows.forEach(handleRow);\n      }\n    };\n\n    paginatedRowModel.rows.forEach(handleRow);\n    return paginatedRowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    }\n  });\n}\n\nexport { ColumnSizing, Expanding, Filters, Grouping, Headers, Ordering, Pagination, Pinning, RowSelection, Sorting, Visibility, aggregationFns, buildHeaderGroups, createCell, createColumn, createColumnHelper, createRow, createTable, defaultColumnSizing, expandRows, filterFns, flattenBy, functionalUpdate, getCoreRowModel, getExpandedRowModel, getFacetedMinMaxValues, getFacetedRowModel, getFacetedUniqueValues, getFilteredRowModel, getGroupedRowModel, getPaginationRowModel, getSortedRowModel, isFunction, isRowSelected, isSubRowSelected, makeStateUpdater, memo, noop, orderColumns, passiveEventSupported, reSplitAlphaNumeric, selectRowsFn, shouldAutoRemoveFilter, sortingFns };\n//# sourceMappingURL=index.js.map\n","import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","result","deps","depTime","debug","Date","now","newDeps","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","resolvedColumnDef","_getDefaultColumnDef","accessorKey","accessorFn","id","replace","undefined","header","includes","originalRow","split","Error","column","columns","getFlatColumns","_column$columns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","headerGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","bottomHeaders","recurseHeadersForSpans","childRowSpans","childColSpan","childRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","mouseEvents","moveHandler","onMove","upHandler","document","removeEventListener","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","noop","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","_row$getValue2","equalsString","_row$getValue3","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","_old$filter","shouldAutoRemoveFilter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","aggregationFns","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","Grouping","aggregatedCell","props","_toString","_props$getValue","toString","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","Pagination","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","_table$initialState$p3","resetPageSize","_table$initialState$p4","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","floor","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","compareBasic","a","b","compareAlphanumeric","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","sortAction","newSorting","nextDesc","_table$options$maxMul","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","cells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","_options$initialState","defaultOptions","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","mergeOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","defaultColumn","_defaultColumn","_props$renderValue$to","_props$renderValue","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","_cell$getValue","renderFallbackValue","original","rowIndex","_valuesCache","hasOwnProperty","getLeafRows","filterRows","filterRowImpl","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","filterRowModelFromLeafs","filterRowModelFromRoot","expandRows","expandedRows","handleRow","accessor","display","group","Comp","component","proto","getPrototypeOf","isReactComponent","isClassComponent","$$typeof","description","isExoticComponent","React","data","accessRows","originalRows","_row$originalSubRows","getSubRows","originalSubRows","facetedRowModel","_facetedRowModel$flat","firstValue","facetedMinMaxValues","preRowModel","filterableIds","facetedUniqueValues","_facetedUniqueValues$","has","set","get","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","_globalFilterFn$resol","j","filterMeta","__global__","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupMap","resKey","previous","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","pageStart","pageEnd","paginatedRowModel","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","aUndefined","bUndefined","sortInt","resolvedOptions","tableRef","useState","current","prev"],"mappings":"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"}